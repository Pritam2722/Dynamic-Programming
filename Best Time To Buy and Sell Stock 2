//leetcode link
//https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/

class Solution {
    int solve(int ind, int buy, vector<int> &prices, int n, vector<vector<int>> &dp){
        if(ind==n) return 0;

        if(dp[ind][buy]!=-1) return dp[ind][buy];

        int profit = 0;
        if(buy){
            profit = max(-prices[ind]+solve(ind+1, 0, prices, n, dp), 0+solve(ind+1, 1, prices, n, dp));
        }
        else{
            profit = max(prices[ind]+solve(ind+1, 1, prices, n, dp), 0+solve(ind+1, 0, prices, n, dp));
        }
        return dp[ind][buy] = profit;
    }
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();

        // Memoization
        vector<vector<int>> dp(n+1, vector<int>(2, -1));
        return solve(0, 1, prices, n, dp);

        // Tabulation
        vector<vector<int>> dp(n+1, vector<int>(2, 0));
        for(int ind=n-1;ind>=0;ind--){
            for(int buy=0;buy<=1;buy++){
                int profit = 0;
                if(buy){
                    profit = max(-prices[ind]+dp[ind+1][0], 0+dp[ind+1][1]);
                }
                else{
                    profit = max(prices[ind]+dp[ind+1][1], 0+dp[ind+1][0]);
                }
                dp[ind][buy] = profit;
            }
        }
        return dp[0][1];


        // Space Optimisation
        vector<int> ahead(2, 0), curr(2, 0);
        for(int ind=n-1;ind>=0;ind--){
            for(int buy=0;buy<=1;buy++){
                int profit = 0;
                if(buy){
                    profit = max(-prices[ind]+ahead[0], 0+ahead[1]);
                }
                else{
                    profit = max(prices[ind]+ahead[1], 0+ahead[0]);
                }
                curr[buy] = profit;
            }
            ahead=curr;
        }
        return ahead[1];


        // Space Optimisation -> variables
        int aheadBuy, aheadNotBuy, currBuy, currNotBuy;
        aheadNotBuy = aheadBuy = 0;
        for(int ind=n-1;ind>=0;ind--){
            // Sell
            currNotBuy = max(prices[ind]+aheadBuy, 0+aheadNotBuy);
            // Buy
            currBuy = max(-prices[ind]+aheadNotBuy, 0+aheadBuy);

            aheadNotBuy=currNotBuy;
            aheadBuy=currBuy;
        }
        return aheadBuy;
    }
};
