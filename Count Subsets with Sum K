//coding ninja link
//https://www.codingninjas.com/studio/problems/number-of-subsets_3952532?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

int mod=1e9+7;
int f(int ind, int sum, vector<int>&arr, vector<vector<int>> &dp){
	if(sum==0) return 1;
	if(ind==0) return (arr[0]==sum);
	if(dp[ind][sum]!=-1) return dp[ind][sum];
	int nottake = f(ind-1, sum, arr, dp);
	int take=0;
	if(sum>=arr[ind]) take=f(ind-1, sum-arr[ind], arr, dp);

	return dp[ind][sum]=(take+nottake)%mod;
}
int findWays(vector<int>& arr, int k)
{
	int n=arr.size();
	// Memoization
	vector<vector<int>> dp(n, vector<int>(k+1, -1));
	return f(n-1, k, arr, dp)%mod;

	// Tabulation
	vector<vector<int>> dp(n, vector<int>(k+1, 0));
	for(int i=0;i<n;i++) dp[i][0]=1;
	if(k>=arr[0]) dp[0][arr[0]] =1;
	for(int ind=1;ind<n;ind++){
		for(int sum=1;sum<=k;sum++){
			int nottake = dp[ind-1][sum];
			int take=0;
			if(sum>=arr[ind]) take=dp[ind-1][sum-arr[ind]];

			dp[ind][sum]=(take+nottake)%mod;
		}
	}
	return (dp[n-1][k])%mod;

	// Space Optimisation
	vector<int> prev(k+1, 0), curr(k+1, 0);
	prev[0] = curr[0] = 1;
	if(k>=arr[0]) prev[arr[0]] =1;
	for(int ind=1;ind<n;ind++){
		for(int sum=1;sum<=k;sum++){
			int nottake = prev[sum];
			int take=0;
			if(sum>=arr[ind]) take=prev[sum-arr[ind]];

			curr[sum]=(take+nottake)%mod;
		}
		prev=curr;
	}
	return (prev[k])%mod;
}
