//leetcode link
//https://leetcode.com/problems/house-robber/?envType=study-plan-v2&envId=dynamic-programming

class Solution {
private:
    int f1(int idx, vector<int>& nums, vector<int>& dp){
        if(idx<0) return 0;
        if(idx==0){
            return nums[0];
        }
        if(dp[idx]!=-1) return dp[idx];
        int nottake = f1(idx-1, nums, dp);
        int take = nums[idx] + f1(idx-2, nums, dp);

        return dp[idx] = max(nottake, take);
    }
public:
    int rob(vector<int>& nums) {
        int n=nums.size();

        //Memoization
        vector<int> dp(n, -1);
        return f1(n-1,nums,dp);

        // Tabulation
        vector<int> dp(n+1, 0);
        dp[1] = nums[0];
        for(int i=2;i<=n;i++){
            int nottake = dp[i-1];
            int take = nums[i-1] + dp[i-2];
            
            dp[i] = max(take, nottake);
        }
        return dp[n];

        // Space Optimisation
        int prev=nums[0], prev2=0;
        for(int i=2;i<=n;i++){
            int nottake = prev;
            int take = nums[i-1] + prev2;

            int curr = max(take, nottake);
            prev2=prev;
            prev=curr;
        }
        return prev;
    }
};
