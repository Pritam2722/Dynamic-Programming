//gfg link
//https://practice.geeksforgeeks.org/problems/longest-increasing-subsequence-1587115620/1

//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends


class Solution
{
    private:
    int solve(int n, int a[], int curr, int prev){
        //base case
        if(curr==n) return 0;
        
        // include
        int take = 0;
        if(prev==-1 || a[curr]>a[prev]){
            take = 1 + solve(n, a, curr+1, curr);
        }
        
        // exclude
        int nottake = 0 + solve(n, a, curr+1, prev);
        
        return max(take, nottake);
    }
    
    int solveMem(int n, int a[], int curr, int prev, vector<vector<int>> &dp){
        //base case
        if(curr==n) return 0;
        if(dp[curr][prev+1]!=-1) return dp[curr][prev+1];
        // include
        int take = 0;
        if(prev==-1 || a[curr]>a[prev]){
            take = 1 + solveMem(n, a, curr+1, curr, dp);
        }
        
        // exclude
        int nottake = 0 + solveMem(n, a, curr+1, prev, dp);
        
        return dp[curr][prev+1] = max(take, nottake);
    }
    int solveTab(int n, int a[]){
        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));
        for(int curr=n-1;curr>=0;curr--){
            for(int prev=curr-1;prev>=-1;prev--){
                // include
                int take = 0;
                if(prev==-1 || a[curr]>a[prev]){
                    take = 1 + dp[curr+1][curr+1];
                }
                
                // exclude
                int nottake = 0 + dp[curr+1][prev+1];
                
                dp[curr][prev+1] = max(take, nottake);
            }
        }
        return dp[0][0];
    }
    int solveSO(int n, int a[]){
        vector<int> currRow(n+1, 0), nextRow(n+1, 0);
        for(int curr=n-1;curr>=0;curr--){
            for(int prev=curr-1;prev>=-1;prev--){
                // include
                int take = 0;
                if(prev==-1 || a[curr]>a[prev]){
                    take = 1 + nextRow[curr+1];
                }
                
                // exclude
                int nottake = 0 + nextRow[prev+1];
                
                currRow[prev+1] = max(take, nottake);
            }
            nextRow = currRow;
        }
        return nextRow[0];
    }
    
    int solveOptimal(int n, int a[]){
        //base case
        if(n==0) return 0;
        
        vector<int> ans;
        
        ans.push_back(a[0]);
        
        for(int i=1;i<n;i++){
            if(a[i]>ans.back()){
                ans.push_back(a[i]);
            }
            else{
                //find index of just bada element in ans
                int index = lower_bound(ans.begin(), ans.end(), a[i]) - ans.begin();
                ans[index] = a[i];
            }
        }
        return ans.size();
    }
    public:
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
    //   return solve(n, a, 0, -1);
    
        // Memoization
        // vector<vector<int>> dp(n, vector<int>(n+1, -1));
        // return solveMem(n, a, 0, -1, dp);
        
        // Tabulation
        // return solveTab(n, a);
        
        // Space Optimisation
        // return solveSO(n, a);
        
        // DP + Binary Search
        return solveOptimal(n, a);

        // Printing the subsequence
        vector<int> dp(n, 1), hash(n);
        int maxi=1;
        int lastIndex=0;
        for(int i=0;i<n;i++){
            hash[i]=i;
            for(int prev=0;prev<i;prev++){
                if(arr[prev]<arr[i] && 1+dp[prev]>dp[i]){
                    dp[i] = 1 + dp[prev];
                    hash[i] = prev;
                }
            }
            if(dp[i]>maxi){
                maxi = dp[i];
                lastIndex = i;
            }
        }
        vector<int> temp;
        temp.push_back(arr[lastIndex]);
        while(hash[lastIndex]!=lastIndex){
            lastIndex = hash[lastIndex];
            temp.push_back(arr[lastIndex]);
        }
        reverse(temp.begin(), temp.end());
        for(auto it:temp){
            cout<<it<<" ";
        }
        cout<<endl;
        return maxi;
    }
};

//{ Driver Code Starts.
int main()
{
    //taking total testcases
    int t,n;
    cin>>t;
    while(t--)
    {
        //taking size of array
        cin>>n;
        int a[n];
        
        //inserting elements to the array
        for(int i=0;i<n;i++)
            cin>>a[i];
        Solution ob;
        //calling method longestSubsequence()
        cout << ob.longestSubsequence(n, a) << endl;
    }
}

// } Driver Code Ends
