//leetcode link
//https://leetcode.com/problems/longest-string-chain/description/

class Solution {
public:
    bool checkPossible(string &s1, string &s2){
        if(s1.size() != s2.size()+1) return false;

        int first = 0;
        int second = 0;

        while(first < s1.size()){
            if(second < s2.size() && s1[first]==s2[second]){
                first++;
                second++;
            }
            else{
                first++;
            }
        }
        if(first==s1.size() && second==s2.size()) return true;
        return false;
    }
    static bool cmp(string& a, string& b){
        return a.size() < b.size();
    }
    int longestStrChain(vector<string>& words) {
        sort(words.begin(), words.end(), cmp);
        int n=words.size();
        vector<int> dp(n, 1);
        int maxi=1;
        for(int i=0;i<n;i++){
            for(int prev=0;prev<i;prev++){
                if(checkPossible(words[i], words[prev]) && 1+dp[prev]>dp[i]){
                    dp[i] = 1 + dp[prev];
                }
            }
            if(dp[i]>maxi){
                maxi = dp[i];
            }
        }
        return maxi;

        // unordered_map<string, int> dp;
        // int maxChain=0;
        // for(auto word:words){
        //     dp[word] = 1;
        //     for(int i=0;i<word.size();i++){
        //         string prevWord = word.substr(0, i) + word.substr(i+1);
        //         if(dp.find(prevWord)!=dp.end()){
        //             dp[word] = max(dp[word], dp[prevWord]+1);
        //         }
        //     }
        //     maxChain = max(maxChain, dp[word]);
        // }
        // return maxChain;
    }
};
