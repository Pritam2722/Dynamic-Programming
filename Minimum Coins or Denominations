//coding ninja link
//https://www.codingninjas.com/studio/problems/minimum-elements_3843091?leftPanelTab=0&campaign=striver_dpseries&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dpseries

#include <bits/stdc++.h>
int f(int ind, int T, vector<int> &num, vector<vector<int>> &dp){
    if(ind==0){
        if(T%num[0]==0) return T/num[0];
        return 1e9;
    }

    if(dp[ind][T]!=-1) return dp[ind][T];
    int nottake = 0 + f(ind-1, T, num, dp);
    int take = INT_MAX;
    if(T>=num[ind]) take = 1 + f(ind, T-num[ind], num, dp);

    return dp[ind][T] = min(take, nottake);
} 
int minimumElements(vector<int> &num, int x)
{
    int n=num.size();
    // Memoization
    vector<vector<int>> dp(n, vector<int>(x+1, -1));
    int ans = f(n-1, x, num, dp);
    if(ans>=1e9) return -1;
    return ans;

    // Tabulation
    vector<vector<int>> dp(n, vector<int>(x+1, 0));
    for(int T=0;T<=x;T++){
        if(T%num[0]==0) dp[0][T] = T/num[0];
        else dp[0][T] = 1e9;
    }

    for(int ind=1;ind<n;ind++){
        for(int T=0;T<=x;T++){
            int nottake = 0 + dp[ind-1][T];
            int take = INT_MAX;
            if(T>=num[ind]) take = 1 + dp[ind][T-num[ind]];

            dp[ind][T] = min(take, nottake);
        }
    }
    int ans = dp[n-1][x];
    if(ans>=1e9) return -1;
    return ans;

    // Space Optimisation
    vector<int> prev(x+1, 0), curr(x+1, 0);
    for(int T=0;T<=x;T++){
        if(T%num[0]==0) prev[T] = T/num[0];
        else prev[T] = 1e9;
    }

    for(int ind=1;ind<n;ind++){
        for (int T = 0; T <= x; T++) {
          int nottake = 0 + prev[T];
          int take = INT_MAX;
          if (T >= num[ind])
            take = 1 + curr[T - num[ind]];

          curr[T] = min(take, nottake);
        }
        prev = curr;
    }
    int ans = prev[x];
    if(ans >= 1e9) return -1;
    return ans;
}
