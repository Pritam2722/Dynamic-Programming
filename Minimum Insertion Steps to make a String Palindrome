//leetcode link
//https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/description/?envType=study-plan-v2&envId=dynamic-programming

// class Solution {
// private:
//     int f(int i, int j, string &s, vector<vector<int>> &dp){
//         if(i>=j) return 0;

//         if(dp[i][j]!=-1) return dp[i][j];
//         if(s[i]==s[j]) return dp[i][j] = f(i+1, j-1, s, dp);

//         // if(s[i]!=s[j]){
//         return dp[i][j] = 1 + min(f(i+1, j, s, dp), f(i, j-1, s, dp));
//     }
// public:
//     int minInsertions(string s) {
//         int n=0;
//         int m=s.size();
//         vector<vector<int>> dp(m, vector<int>(m, -1));
//         return f(n, m-1, s, dp);


//         vector<vector<int>> dp(m, vector<int>(m, -1));
//         for(int i=0;i<n;i++){
//             for(int j=m-1;j>=0;j--){
//                 if(i>=j) dp[i][j]=0;
//             }
//         }
        
//     }
// };

class Solution {
private:
    int f(int i, int j, string &s, string &t, vector<vector<int>> &dp){
        if(i<0 || j<0){
            return 0;
        }

        if(dp[i][j]!=-1) return dp[i][j];
        if(s[i]==t[j]){
            return dp[i][j] = 1 + f(i-1, j-1, s, t, dp);
        }

        return dp[i][j] = 0 + max(f(i-1, j, s, t, dp), f(i, j-1, s, t, dp));
    }

    int lcs(string &s, string &t)
    {
        int n=s.size();
        int m=t.size();

        // Memoization
        // vector<vector<int>> dp(n, vector<int>(m, -1));
        // return f(n-1, m-1, s, t, dp);


        // Tabulation
        // vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
        // for(int j=0;j<=m;j++) dp[0][j] = 0;
        // for(int i=0;i<=n;i++) dp[i][0] = 0;
        // for(int i=1;i<=n;i++){
        // 	for(int j=1;j<=m;j++){
        // 		if(s[i-1]==t[j-1]){
        // 			dp[i][j] = 1 + dp[i-1][j-1];
        // 		}

        // 		else dp[i][j] = 0 + max(dp[i-1][j], dp[i][j-1]);
        // 	}
        // }
        // return dp[n][m];


        // Space Optimisation
        vector<int> prev(m+1, 0), curr(m+1, 0);
        for(int j=0;j<=m;j++) prev[j] = 0;

        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1]){
                    curr[j] = 1 + prev[j-1];
                }

                else curr[j] = 0 + max(prev[j], curr[j-1]);
            }
            prev=curr;
        }
        return prev[m];
    }
    int longestPalindromeSubsequence(string &s)
    {
        string t = s;
        reverse(t.begin(), t.end());
        return lcs(s, t);
    }
public:
    int minInsertions(string s) {
        return s.size() - longestPalindromeSubsequence(s);
    }
};
