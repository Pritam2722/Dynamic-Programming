//leetcode link
//https://leetcode.com/problems/number-of-longest-increasing-subsequence/description/

class Solution {
public:
    int findNumberOfLIS(vector<int>& arr) {
        int n=arr.size();
        int maxi=0;
        vector<int> dp(n, 1), cnt(n, 1);
        for(int i=0;i<n;i++){
            for(int prev=0;prev<i;prev++){
                if(arr[prev]<arr[i] && 1+dp[prev]>dp[i]){
                    dp[i] = 1 + dp[prev];
                    // inherit
                    cnt[i] = cnt[prev];
                }
                else if(arr[prev]<arr[i] && 1+dp[prev]==dp[i]){
                    // increase the cnt
                    cnt[i] += cnt[prev];
                }
            }
            maxi = max(maxi, dp[i]);
        }

        int ans=0;
        for(int i=0;i<n;i++){
            if(dp[i]==maxi) ans += cnt[i];
        }
        return ans;
    }
};
