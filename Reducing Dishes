//leetcode link
//https://leetcode.com/problems/reducing-dishes/description/

class Solution {
private:
    int solve(vector<int>& satisfaction, int index, int time){
        // base case
        if(index==satisfaction.size()) return 0;
        
        int take = satisfaction[index]*(time+1) + solve(satisfaction, index+1, time+1);

        int nottake = 0 + solve(satisfaction, index+1, time);

        return max(take, nottake);
    }

    int solveMem(vector<int>& satisfaction, int index, int time, vector<vector<int>> &dp){
        // base case
        if(index==satisfaction.size()) return 0;
        
        if(dp[index][time]!=-1) return dp[index][time];

        int take = satisfaction[index]*(time+1) + solveMem(satisfaction, index+1, time+1, dp);

        int nottake = 0 + solveMem(satisfaction, index+1, time, dp);

        return dp[index][time] = max(take, nottake);
    }
    int solveTab(vector<int> &satisfaction){
        int n = satisfaction.size();
        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));

        for(int index=n-1;index>=0;index--){
            for(int time=index;time>=0;time--){
                int take = satisfaction[index]*(time+1) + dp[index+1][time+1];

                int nottake = 0 + dp[index+1][time];

                dp[index][time] = max(take, nottake);
            }
        }
        return dp[0][0];
    }
    int solveSO(vector<int> &satisfaction){
        int n = satisfaction.size();
        vector<int> curr(n+1, 0), next(n+1, 0);

        for(int index=n-1;index>=0;index--){
            for(int time=index;time>=0;time--){
                int take = satisfaction[index]*(time+1) + next[time+1];

                int nottake = 0 + next[time];

                curr[time] = max(take, nottake);
            }
            next = curr;
        }
        return next[0];
    }
public:
    int maxSatisfaction(vector<int>& satisfaction) {
        int n = satisfaction.size();
        sort(satisfaction.begin(), satisfaction.end());
        return solve(satisfaction, 0, 0);

        // Memoization
        vector<vector<int>> dp(n+1, vector<int>(n+1, -1));
        return solveMem(satisfaction, 0, 0, dp);

        // Tabulation
        return solveTab(satisfaction);

        // Space optimisation
        return solveSO(satisfaction);
    }
};
