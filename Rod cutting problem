//coding ninja link
//https://www.codingninjas.com/studio/problems/rod-cutting-problem_800284?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0


int f(int ind, int N, vector<int>&price, vector<vector<int>>&dp){
	if(ind==0){
		return N*price[0];
	}
	if(dp[ind][N]!=-1) return dp[ind][N];
	int nottake = 0 + f(ind-1, N, price, dp);
	int take = INT_MIN;
	int rodlen = ind+1;
	if(N>=rodlen) take = price[ind] + f(ind, N-rodlen, price, dp);
	return dp[ind][N] = max(take, nottake);
}
int cutRod(vector<int> &price, int n)
{
	// Memoization
	vector<vector<int>> dp(n, vector<int>(n+1, -1));
	return f(n-1, n, price, dp);

	// Tabulation
    vector<vector<int>> dp(n, vector<int>(n+1, 0));
    for(int N=0;N<=n;N++){
        dp[0][N] = N*price[0];
    }
    for(int ind=1;ind<n;ind++){
        for(int N=0;N<=n;N++){
            int nottake = dp[ind-1][N];
            int take = INT_MIN;
			int rodlen = ind+1;
            if(N>=rodlen) take = price[ind] + dp[ind][N-rodlen];

            dp[ind][N] = max(take, nottake);
        }
    }
    return dp[n-1][n];


	// Space Optimisation
    vector<int> prev(n+1, 0), curr(n+1, 0);
    for(int N=0;N<=n;N++){
        prev[N] = N*price[0];
    }
    for(int ind=1;ind<n;ind++){
        for(int N=0;N<=n;N++){
            int nottake = prev[N];
            int take = INT_MIN;
			int rodlen = ind+1;
            if(N>=rodlen) take = price[ind] + curr[N-rodlen];

            curr[N] = max(take, nottake);
        }
		prev=curr;
    }
    return prev[n];

	// Space Optimisation into one array
	vector<int> prev(n+1, 0);
    for(int N=0;N<=n;N++){
        prev[N] = N*price[0];
    }
    for(int ind=1;ind<n;ind++){
        for(int N=0;N<=n;N++){
            int nottake = prev[N];
            int take = INT_MIN;
			int rodlen = ind+1;
            if(N>=rodlen) take = price[ind] + prev[N-rodlen];

            prev[N] = max(take, nottake);
        }
    }
    return prev[n];
}
