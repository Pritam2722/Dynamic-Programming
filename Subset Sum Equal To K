//coding ninja link
//https://www.codingninjas.com/studio/problems/subset-sum-equal-to-k_1550954?leftPanelTab=0&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos

#include <bits/stdc++.h> 
bool f(int n, int k, vector<int> &arr, vector<vector<int>> &dp){
    if(k==0) return true;
    if(n==0) return (arr[0]==k);
    if(dp[n][k]!=-1) return dp[n][k];

    bool nottake = f(n-1, k, arr, dp);
    bool take = false;
    if(k>=arr[n]) take = f(n-1, k-arr[n], arr, dp);

    return dp[n][k] = take+nottake;
}
bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Memoization
    vector<vector<int>> dp(n, vector<int>(k+1, -1));
    return f(n-1, k, arr, dp);

    // Tabulation
    vector<vector<bool>> dp(n, vector<bool>(k+1, 0));
    for(int i=0;i<n;i++) dp[i][0] = true;
    dp[0][arr[0]] = true;
    for(int ind=1;ind<n;ind++){
        for(int target=1;target<=k;target++){
            bool nottake = dp[ind-1][target];
            bool take = false;
            if(target>=arr[ind]) take = dp[ind-1][target-arr[ind]];

            dp[ind][target] = take+nottake;
        }
    }
    return dp[n-1][k];

    // Space Optimisation
    vector<bool> prev(k+1, 0), curr(k+1, 0);
    prev[0] = curr[0] = true;
    prev[arr[0]] = true;
    for(int ind=1;ind<n;ind++){
        for(int target=1;target<=k;target++){
            bool nottake = prev[target];
            bool take = false;
            if(target>=arr[ind]) take = prev[target-arr[ind]];

            curr[target] = take+nottake;
        }
        prev = curr;
    }
    return prev[k];
}
