//coding ninja link
//https://www.codingninjas.com/studio/problems/target-sum_4127362?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

#include <bits/stdc++.h> 
int f(int ind, int sum, vector<int>&arr, vector<vector<int>> &dp){
	if(ind==0){
        if(sum==0 && arr[0]==0) return 2;
        if(sum==0 || sum==arr[0]) return 1;
        return 0;
    }
	if(dp[ind][sum]!=-1) return dp[ind][sum];
	int nottake = f(ind-1, sum, arr, dp);
	int take=0;
	if(sum>=arr[ind]) take=f(ind-1, sum-arr[ind], arr, dp);

	return dp[ind][sum]=(take+nottake);
}
int findWays(vector<int> &arr, int k) {
    int n = arr.size();
    // Memoization
    vector<vector<int>> dp(n, vector<int>(k + 1, -1));
    return f(n - 1, k, arr, dp);

    // Tabulation
	// vector<vector<int>> dp(n, vector<int>(k+1, 0));
	// if(arr[0]==0) dp[0][0]=2;
    // else dp[0][0]=1;
    // // arr[0] = 0
	// if(arr[0]!=0 && k>=arr[0]) dp[0][arr[0]] = 1;
	// for(int ind=1;ind<n;ind++){
	// 	for(int sum=1;sum<=k;sum++){
	// 		int nottake = dp[ind-1][sum];
	// 		int take=0;
	// 		if(sum>=arr[ind]) take=dp[ind-1][sum-arr[ind]];

	// 		dp[ind][sum]=(take+nottake);
	// 	}
	// }
	// return (dp[n-1][k]);

    // Space Optimisation
    // vector<int> prev(k+1, 0), curr(k+1, 0);
	// if(arr[0]==0) prev[0]=2;
    // else prev[0]=1;
    // // arr[0] = 0
	// if(arr[0]!=0 && k>=arr[0]) prev[arr[0]] = 1;
	// for(int ind=1;ind<n;ind++){
	// 	for(int sum=1;sum<=k;sum++){
	// 		int nottake = prev[sum];
	// 		int take=0;
	// 		if(sum>=arr[ind]) take=prev[sum-arr[ind]];

	// 		curr[sum]=(take+nottake);
	// 	}
	// 	prev=curr;
	// }
	// return prev[k];
}
int countPartitions(int n, int d, vector<int> &arr) {
    int totSum=0;
    for(auto &it:arr){
        totSum+=it;
    }
    if(totSum-d<0 || (totSum-d)%2) return false;
    return findWays(arr, (totSum-d)/2);
}
int targetSum(int n, int target, vector<int>& arr) {
    return countPartitions(n, target, arr);
}
