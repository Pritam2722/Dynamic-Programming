//coding ninja link
//https://www.codingninjas.com/studio/problems/unbounded-knapsack_1215029?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

#include<bits/stdc++.h>
int f(int ind, int w, vector<int> &profit, vector<int> &weight, vector<vector<int>> &dp){
    if(ind==0){
        return ((int)(w/weight[0]))*(profit[0]);
    }

    if(dp[ind][w]!=-1) return dp[ind][w];
    int nottake = f(ind-1, w, profit, weight, dp);
    int take = INT_MIN;
    if(w>=weight[ind]) take = profit[ind] + f(ind, w-weight[ind], profit, weight, dp);

    return dp[ind][w] = max(take, nottake);
}

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight){
    // Memoization
    vector<vector<int>> dp(n, vector<int>(w+1, -1));
    return f(n-1, w, profit, weight, dp);

    // Tabulation
    vector<vector<int>> dp(n, vector<int>(w+1, 0));
    for(int W=0;W<=w;W++){
        dp[0][W] = ((int)(W/weight[0]))*(profit[0]);
    }
    for(int ind=1;ind<n;ind++){
        for(int W=0;W<=w;W++){
            int nottake = dp[ind-1][W];
            int take = INT_MIN;
            if(W>=weight[ind]) take = profit[ind] + dp[ind][W-weight[ind]];

            dp[ind][W] = max(take, nottake);
        }
    }
    return dp[n-1][w];


    // Space Optimisation
    vector<int> prev(w+1, 0), curr(w+1, 0);
    for(int W=0;W<=w;W++){
        prev[W] = ((int)(W/weight[0]))*(profit[0]);
    }
    for(int ind=1;ind<n;ind++){
        for(int W=0;W<=w;W++){
            int nottake = prev[W];
            int take = INT_MIN;
            if(W>=weight[ind]) take = profit[ind] + curr[W-weight[ind]];

            curr[W] = max(take, nottake);
        }
        prev=curr;
    }
    return prev[w];


    // Space Optimisation into one array
    vector<int> prev(w+1, 0);
    for(int W=0;W<=w;W++){
        prev[W] = ((int)(W/weight[0]))*(profit[0]);
    }
    for(int ind=1;ind<n;ind++){
        for(int W=0;W<=w;W++){
            int nottake = prev[W];
            int take = INT_MIN;
            if(W>=weight[ind]) take = profit[ind] + prev[W-weight[ind]];

            prev[W] = max(take, nottake);
        }
    }
    return prev[w];
}
