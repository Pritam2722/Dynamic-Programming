//coding ninja link
//https://www.codingninjas.com/studio/problems/total-unique-paths_1081470?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

#include <bits/stdc++.h>
int f(int row, int col, vector<vector<int>> &dp){
	if(row==0 && col==0) return 1;
	if(row<0 || col<0) return 0;

	if(dp[row][col]!=-1) return dp[row][col];

	int up = f(row-1, col, dp);
	int left = f(row, col-1, dp);

	return dp[row][col] = up + left;
} 
int uniquePaths(int m, int n) {
	// Memoization
	vector<vector<int>> dp(m, vector<int>(n, -1));
	return f(m-1, n-1, dp);

	// Tabulation
	vector<vector<int>> dp(m, vector<int>(n, 0));
	for(int i=0;i<m;i++){
		for(int j=0;j<n;j++){
			if(i==0 && j==0) dp[i][j]=1;
			else{
				int up=0;
				int left=0;
				if(i>0) up = dp[i-1][j];
				if(j>0) left = dp[i][j-1];
				dp[i][j] = up + left;
			}
		}
	}
	return dp[m-1][n-1];

	// Space Optimisation
	vector<int> prev(n, 0);
	for(int i=0;i<m;i++){
		vector<int> curr(n, 0);
		for(int j=0;j<n;j++){
			if(i==0 && j==0) curr[j]=1;
			else{
				int up=0;
				int left=0;
				if(i>0) up = prev[j];
				if(j>0) left = curr[j-1];
				curr[j] = up + left;
			}
		}
		prev = curr;
	}
	return prev[n-1];
}
