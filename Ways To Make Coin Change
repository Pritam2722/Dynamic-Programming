//coding ninja link
//https://www.codingninjas.com/studio/problems/ways-to-make-coin-change_630471?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

#include<bits/stdc++.h>
long f(int ind, int T, int *a, vector<vector<long>> &dp){
    if(ind==0){
        return (T%a[0]==0);
    }
    if(dp[ind][T]!=-1) return dp[ind][T];
    long nottake = f(ind-1, T, a, dp);
    long take=0;
    if(T>=a[ind]) take=f(ind, T-a[ind], a, dp);
    return dp[ind][T]=take+nottake;
}
long countWaysToMakeChange(int *denominations, int n, int value)
{
    // Memoization
    vector<vector<long>> dp(n, vector<long>(value+1, -1));
    return f(n-1, value, denominations, dp);

    // Tabulation
    vector<vector<long>> dp(n, vector<long>(value+1, 0));
    for(int T=0;T<=value;T++){
        dp[0][T] = (T%denominations[0]==0);
    }
    for(int ind=1;ind<n;ind++){
        for(int T=0;T<=value;T++){
            long nottake = dp[ind-1][T];
            long take=0;
            if(T>=denominations[ind]) take=dp[ind][T-denominations[ind]];
            dp[ind][T]=take+nottake;
        }
    }
    return dp[n-1][value];

    // Space Optimisation
    vector<long> prev(value+1, 0), curr(value+1, 0);
    for(int T=0;T<=value;T++){
        prev[T] = (T%denominations[0]==0);
    }
    for(int ind=1;ind<n;ind++){
        for(int T=0;T<=value;T++){
            long nottake = prev[T];
            long take=0;
            if(T>=denominations[ind]) take=curr[T-denominations[ind]];
            curr[T]=take+nottake;
        }
        prev=curr;
    }
    return prev[value];
}
