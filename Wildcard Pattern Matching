//coding ninja link
//https://www.codingninjas.com/studio/problems/wildcard-pattern-matching_701650?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

#include<bits/stdc++.h>
bool solve(int i, int j, string &pattern, string &text, vector<vector<int>> &dp){
   if(i==0 && j==0) return true;
   if(i==0 && j>0) return false;
   if(j==0 && i>0){
      for(int ii=1;ii<=i;ii++){
         if(pattern[ii-1]!='*') return false;
      }
      return true;
   }

   if(dp[i][j]!=-1) return dp[i][j];

   if(pattern[i-1]==text[j-1] || pattern[i-1]=='?'){
      return dp[i][j] = solve(i-1, j-1, pattern, text, dp);
   }
   if(pattern[i-1]=='*'){
      return dp[i][j] = solve(i-1, j, pattern, text, dp) | solve(i, j-1, pattern, text, dp);
   }
   return dp[i][j] = false;
}
bool wildcardMatching(string pattern, string text)
{
   int n=pattern.size();
   int m=text.size();

   // Memoization
   vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
   return solve(n, m, pattern, text, dp);

   // Tabulation
   vector<vector<bool>> dp(n+1, vector<bool>(m+1, false));
   dp[0][0] = true;
   for(int j=1;j<=m;j++) dp[0][j] = false;
   for(int i=1;i<=n;i++){
      bool flag = true;
      for(int ii=1;ii<=i;ii++){
         if(pattern[ii-1]!='*'){
            flag = false;
            break;
         }
      }
      dp[i][0] = flag;
   }

   for(int i=1;i<=n;i++){
      for(int j=1;j<=m;j++){
         if(pattern[i-1]==text[j-1] || pattern[i-1]=='?'){
            dp[i][j] = dp[i-1][j-1];
         }
         else if(pattern[i-1]=='*'){
            dp[i][j] = dp[i-1][j] | dp[i][j-1];
         }
         else dp[i][j] = false;
      }
   }
   return dp[n][m];


   // Space Optimisation
   vector<bool> prev(m+1, false), curr(m+1, false);
   prev[0] = true;
   for(int j=1;j<=m;j++) prev[j] = false;

   for(int i=1;i<=n;i++){
      // curr is the current row's column
      // ans that curr's 0th row has to be assigned everytime
      bool flag = true;
      for(int ii=1;ii<=i;ii++){
         if(pattern[ii-1]!='*'){
            flag = false;
            break;
         }
      }
      // for every row
      // you are assigning the 0th column value
      curr[0] = flag;
      for(int j=1;j<=m;j++){
         if(pattern[i-1]==text[j-1] || pattern[i-1]=='?'){
            curr[j] = prev[j-1];
         }
         else if(pattern[i-1]=='*'){
            curr[j] = prev[j] | curr[j-1];
         }
         else curr[j] = false;
      }
      prev = curr;
   }
   return prev[m];
}
